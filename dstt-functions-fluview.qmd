---
title: "Using Functions to Query an API"
subtitle: CSTE Data Science Team Training Program
author: 
  - Stephen Turner
  - Pete Nagraj
date: 2023-03-28
format: 
  html:
    toc: true
    toc-location: left
    title-block-banner: false
    theme: default
    embed-resources: true
    code-line-numbers: false
    code-annotations: hover
    footnotes-hover: true
    # fontsize: 11pt
    grid:
      body-width: 850px
execute: 
  eval: true
  warning: true
  message: true
---

```{r}
#| include: false
#| eval: true
if (quarto::quarto_version() < "1.3") stop("Must have quarto >= 1.3")
```

## Functions

It is much better practice to write functions to perform a task rather than copying and pasting code. This offers several advantages:

1. Avoids duplication. 
1. Easier maintenance. If requirements change, you only need to update the function once, rather than update everywhere you've copied and pasted the code.
1. Avoids copy-paste errors, or errors where some duplicates are updated but not others.
1. Makes code modular. The function you write here could be used elsewhere.

Let's take a look at an example task where we want to retrieve data from a web API, do some data manipulation, and write out results to a file.

```{r}
#| message: false
library(tidyverse)
library(jsonlite)
library(MMWRweek)
```

### ILI data from FluView

Let's retrieve Influenza-like illness (ILI) from U.S. Outpatient Influenza-like Illness Surveillance Network (ILINet) using the [CMU Delphi FluView API](https://cmu-delphi.github.io/delphi-epidata/api/fluview.html). The base URL is `https://delphi.cmu.edu/epidata/fluview/`, which must be combined with required parameters to specify one or more regions and epidemiological weeks. 

For example, if we want to retrieve the first five weeks of ILI data for Washington state for 2023, we could visit the following URL:   
<https://delphi.cmu.edu/epidata/fluview/?regions=wa&epiweeks=202201-202205>. 

The data that is returned through this API is JSON, which can be read into R using the [jsonlite](https://cran.r-project.org/package=jsonlite) package.

First, let's construct our base URL:

```{r}
baseurl <- "https://delphi.cmu.edu/epidata/fluview/"
```

Next, let's build up our URL by specifying what location and year we want. In this example, let's get data for California for 2020. We start by specifying the year we want, then construct the epidemiological week string, then finally putting it all together into a URL string.

::: {.callout-note collapse="true"}
## Note (click to expand)

Note that we _could_ simply specify multiple years and multiple regions at once. For example, we could get data for all of 2019 and 2020 for Washington, California, and Oregon at <https://delphi.cmu.edu/epidata/fluview/?regions=wa,or,ca&epiweeks=201901-202053>. However, for the sake of demonstration, let's imagine that the API only allows retrieval of one location, one year at a time.
:::

```{r}
# Specify the region and year
location <- "ca"
year <- 2020

# Construct the epiweek string
epiweeks <- paste0(year, "01", "-", year, "53")
epiweeks

# Construct the URL suffix
urlsuffix <- paste0("?regions=", location, "&epiweeks=", epiweeks)
urlsuffix

# Construct the entire URL
url <- paste0(baseurl, urlsuffix)
url
```

Now we can retrieve data for all of 2020 for California. Let's select out the region, epiweek, weighted ILI, then figure out the date from the epiweek. Hover over the numbers to the right in the code block below to view explanations.

```{r}
ca2020 <- 
  read_json(url, simplifyVector = TRUE)$epidata %>% # <1>
  tibble() %>% # <2> 
  select(region, epiweek, wili) %>% # <3>
  mutate(year=as.numeric(substr(epiweek, 0, 4)), # <4>
         week=as.numeric(substr(epiweek, 5, 6)), # <5>
         date=MMWRweek2Date(year, week)) # <6>
ca2020
```
1. This returns a data.frame object.
2. This turns the data frame into a tibble, which are easier to work with and print nicely.
3. We only want the region, epiweek string, and weighted ILI.
4. Get the numeric year (first four characters in the epiweek string).
5. Get the numeric week (fifth and sixth characters in the epiweek string).
6. Use the [MMWRweek](https://cran.r-project.org/package=MMWRweek) package to get the date from the epidemiological year and week.

### Copy and paste

Let's do this for Washington state for 2018-2021. What are the problems with this code? 

1. First, there's tons of duplication. Imagine we wanted to do this for 10 years of data for Washington state? What if we wanted to do this for multiple states? 
2. Related, what if we needed to change something about the code here? For instance, what if we wanted to get the unweighted ILI instead of weighted ILI (`wili`)? 
3. There's lots of room for error here. Each time we copy and paste the code block, we're creating new objects (`wa2019`, `wa2020`, etc.). What if we forget to modify the name of the object we're assigning, which could result in writing 2020 data to the 2019 object (see annotation #1). Or, what if we forget to change the filename we're writing to, and accidentally write 2018 data to `wa2020.csv` (annotation #2)? There's lots we have to keep track of mentally, for what's actually a relatively simple pipeline. 

```{r}
#| eval: false

# First let's set the base URL if we haven't already
baseurl <- "https://delphi.cmu.edu/epidata/fluview/"

# Retrieve and write out 2018 data
location <- "wa"
year <- 2018
epiweeks <- paste0(year, "01", "-", year, "53")
urlsuffix <- paste0("?regions=", location, "&epiweeks=", epiweeks)
url <- paste0(baseurl, urlsuffix)
wa2018 <- 
  read_json(url, simplifyVector = TRUE)$epidata %>% 
  tibble() %>% 
  select(region, epiweek, wili) %>% 
  mutate(year=as.numeric(substr(epiweek, 0, 4)), 
         week=as.numeric(substr(epiweek, 5, 6)), 
         date=MMWRweek2Date(year, week)) 
write_csv(wa2018, file="wa2018.csv")

# Retrieve and write out 2019 data
location <- "wa"
year <- 2019
epiweeks <- paste0(year, "01", "-", year, "53")
urlsuffix <- paste0("?regions=", location, "&epiweeks=", epiweeks)
url <- paste0(baseurl, urlsuffix)
wa2019 <- # <1>
  read_json(url, simplifyVector = TRUE)$epidata %>% 
  tibble() %>% 
  select(region, epiweek, wili) %>% 
  mutate(year=as.numeric(substr(epiweek, 0, 4)), 
         week=as.numeric(substr(epiweek, 5, 6)), 
         date=MMWRweek2Date(year, week)) 
write_csv(wa2019, file="wa2019.csv") # <2>

# Retrieve and write out 2020 data
location <- "wa"
year <- 2020
epiweeks <- paste0(year, "01", "-", year, "53")
urlsuffix <- paste0("?regions=", location, "&epiweeks=", epiweeks)
url <- paste0(baseurl, urlsuffix)
wa2020 <- 
  read_json(url, simplifyVector = TRUE)$epidata %>% 
  tibble() %>% 
  select(region, epiweek, wili) %>% 
  mutate(year=as.numeric(substr(epiweek, 0, 4)), 
         week=as.numeric(substr(epiweek, 5, 6)), 
         date=MMWRweek2Date(year, week)) 
write_csv(wa2020, file="wa2020.csv")

# Retrieve and write out 2021 data
location <- "wa"
year <- 2021
epiweeks <- paste0(year, "01", "-", year, "53")
urlsuffix <- paste0("?regions=", location, "&epiweeks=", epiweeks)
url <- paste0(baseurl, urlsuffix)
wa2021 <- 
  read_json(url, simplifyVector = TRUE)$epidata %>% 
  tibble() %>% 
  select(region, epiweek, wili) %>% 
  mutate(year=as.numeric(substr(epiweek, 0, 4)), 
         week=as.numeric(substr(epiweek, 5, 6)), 
         date=MMWRweek2Date(year, week)) 
write_csv(wa2021, file="wa2021.csv")
```
1. What if we forget to change the name of the object, `wa2019` here? 
2. What if we forget to change both the name of the object we're saving, `wa2019`, and the filename, `wa2019.csv`? 

### Using functions

Let's define a function, which will allow us to define inputs arbitrarily.

```{r}
get_wili <- function(location, year, write=FALSE) { # <1> 
  
  # Set the base URL
  baseurl <- "https://delphi.cmu.edu/epidata/fluview/"
  
  # Construct the full API URL
  epiweeks <- paste0(year, "01", "-", year, "53") # <2> 
  urlsuffix <- paste0("?regions=", location, "&epiweeks=", epiweeks) # <2>
  url <- paste0(baseurl, urlsuffix)
  
  # Get the results
  result <- 
    read_json(url, simplifyVector = TRUE)$epidata %>% 
    tibble() %>% 
    select(region, epiweek, wili) %>% 
    mutate(year=as.numeric(substr(epiweek, 0, 4)), 
           week=as.numeric(substr(epiweek, 5, 6)), 
           date=MMWRweek2Date(year, week)) 

  # Optional: if write=TRUE, write out to file
  if (write) { # <3> 
    outfile <- paste0(location, year, ".csv") # <4>
    if (file.exists(outfile)) { # <5>
      warning(paste0("Skipping writing output file that already exists: ", outfile)) # <5>
    } else { # <5>
      message(paste0("Writing results to file: ", outfile)) # <5>
      write_csv(result, outfile) # <5>
    } # <5>
  } 
  
  # Return the results of the function
  return(result)
}
```
1. `location` and `year` must be specified. By default, no files are written (default `write=FALSE`).
2. The `year` and `location` variables here are defined as function arguments. 
3. If the function is called with `write=TRUE`, this block will be run.
4. Construct an output filename.
5. If the output file already exists, issue a warning, and do not overwrite the file. If the output file doesn't exist, write it out to disk and message the output filename.

Now we can get data for any state or year with a single function call! Let's get data for California in 2018:

```{r}
get_wili(location="ca", year=2018)
```

Or Virginia in 2011:

```{r}
get_wili(location="va", year=2011)
```

By default, `write=FALSE`. Let's set `write=TRUE`, which will result in a csv being written to disk which takes a default filename as the name of the location and the year. Let's do this for Washington state in 2019. Note that our function returns a message that gets printed to the screen, notifying you where the data is being written.

```{r}
#| label: cleanup
#| include: false
file.remove(list.files(pattern="wa\\d{4}\\.csv"))
```

```{r}
get_wili(location="wa", year=2019, write=TRUE)
```

Note that if the file already exists, our function will skip over it and issue a warning.

```{r}
get_wili(location="wa", year=2019, write=TRUE)
```

```{r}
#| label: cleanup
#| include: false
```

### Advanced: Mapping a function over multiple inputs

The `get_wili()` function takes three arguments: a location, a year, and a logical TRUE/FALSE flag indicating whether output should be written to a CSV. We could run this code successively over every year we were interested in:

```{r}
#| eval: false
get_wili(location="wa", year=2012, write=TRUE)
get_wili(location="wa", year=2013, write=TRUE)
get_wili(location="wa", year=2014, write=TRUE)
get_wili(location="wa", year=2015, write=TRUE)
# ...etc
```

However, we can use the [purrr](https://purrr.tidyverse.org/) package to _map_ the `get_wili()` function over multiple `year` inputs. We create a `years` vector that holds 10 years spanning 2012 through 2021, then we apply purrr's [`map()`](https://purrr.tidyverse.org/reference/map.html) function to this `years` vector, to run a function on each element of `years`. Here, the function we use is `get_wili()`, and the `.` in the function call is replaced by the year in `years`. In other words, this one line of code runs `get_wili()` over every year in 2012-2021 for Washington state. Additionally, we set `write=TRUE` so that CSV tables are written out for every year.

```{r}
years <- 2012:2021
wa10yrs <- map(years, ~get_wili(location="wa", year=., write=TRUE))
```

```{r}
#| label: cleanup
#| include: false
```

Take a look at the data that is returned by this operation. The `map()` function always returns a _list_, where each element of the list is a tibble containing all that year's data. The list has 10 years' worth of data. Let's only look at the first two elements (2012-2013).

```{r}
wa10yrs[1:2]
```

We can collapse that list into one large tibble containing the entire range of data using [`dplyr::bind_rows()`](https://dplyr.tidyverse.org/reference/bind.html).

```{r}
wa10yrs <- bind_rows(wa10yrs)
```

Let's take a look: 

```{r}
wa10yrs
```

Note the range of the dates extends from January 2012 through December 2021:

```{r}
range(wa10yrs$date)
```

::: {.callout-tip}
## Going further

How might you map over multiple locations _and_ multiple years? See the documentation for [`map2()`](https://purrr.tidyverse.org/reference/map2.html) or purrr's other [map variants](https://purrr.tidyverse.org/reference/index.html#map-variants).
:::

Now that we have all the data in one tibble, let's plot weighted ILI over the last 10 years for Washington state:

```{r}
ggplot(wa10yrs, aes(date, wili)) + 
  geom_line() + 
  scale_x_date(date_breaks="1 year", date_labels="%Y")
```

